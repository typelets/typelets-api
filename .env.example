# ================================================================
# TYPELETS API - ENVIRONMENT CONFIGURATION TEMPLATE
# ================================================================
# This file is for LOCAL DEVELOPMENT AND TESTING ONLY
# Copy this file to `.env` and update with your actual values
# Production deployments use AWS ECS task definitions, not .env files

# ================================================================
# REQUIRED CONFIGURATION
# ================================================================

# Database Connection (REQUIRED)
# For Docker PostgreSQL (recommended for local development):
DATABASE_URL=postgresql://postgres:devpassword@localhost:5432/typelets_local
# For local PostgreSQL installation:
# DATABASE_URL=postgresql://postgres:your_password@localhost:5432/typelets_local
# For production (example):
# DATABASE_URL=postgresql://username:password@hostname:5432/database?sslmode=require

# Valkey Cache (OPTIONAL - for performance optimization)
# VALKEY_HOST=your-cluster.serverless.use1.cache.amazonaws.com
# VALKEY_PORT=6379

# Clerk Authentication (REQUIRED)
# Get your secret key from: https://dashboard.clerk.com/
# For development, use test keys (sk_test_...)
# For production, use live keys (sk_live_...)
CLERK_SECRET_KEY=sk_test_your_actual_clerk_secret_key_from_dashboard

# CORS Origins (REQUIRED)
# Comma-separated list of allowed origins (no spaces after commas)
# Include all frontend domains that will access this API
# If not set, all cross-origin requests will be blocked
CORS_ORIGINS=http://localhost:5173,http://localhost:3000
# Production example:
# CORS_ORIGINS=https://app.typelets.com,https://typelets.com

# ================================================================
# SERVER CONFIGURATION
# ================================================================

# Server Port
PORT=3000

# Environment
NODE_ENV=development

# API URL (for OpenAPI/Swagger documentation)
# This sets the server URL shown in the Swagger docs
# Development (default):
API_URL=http://localhost:3000
# Production example:
# API_URL=https://api.typelets.com

# ================================================================
# SECURITY CONFIGURATION
# ================================================================

# WebSocket Message Authentication
# Generate with: openssl rand -hex 32
# CRITICAL: Use a strong random string (minimum 32 characters) in production
MESSAGE_AUTH_SECRET=your-very-secure-random-string-here-min-32-chars

# ================================================================
# RATE LIMITING CONFIGURATION
# ================================================================
# Current defaults are development-friendly
# Adjust these values based on your usage patterns

# HTTP API Rate Limiting
# HTTP_RATE_LIMIT_WINDOW_MS=900000    # 15 minutes in milliseconds
# HTTP_RATE_LIMIT_MAX_REQUESTS=1000   # Max requests per window per user/IP
# HTTP_FILE_RATE_LIMIT_MAX=100        # Max file operations per window

# WebSocket Rate Limiting
WS_RATE_LIMIT_WINDOW_MS=60000# Time window: 1 minute (in milliseconds)
WS_RATE_LIMIT_MAX_MESSAGES=300# Max messages per window per connection
WS_MAX_CONNECTIONS_PER_USER=20# Max concurrent connections per user
WS_AUTH_TIMEOUT_MS=30000# Authentication timeout: 30 seconds

# Production Rate Limiting Recommendations:
# - HTTP: 500-1000 requests per 15 minutes per user
# - WebSocket: 100-300 messages per minute per connection
# - File uploads: 50-100 operations per 15 minutes per user
# - Connections: 10-20 per user depending on multi-device usage

# ================================================================
# FILE UPLOAD CONFIGURATION
# ================================================================

# File Size Limits
MAX_FILE_SIZE_MB=50# Maximum size per file (default: 50MB)
# MAX_NOTE_SIZE_MB=1024               # Maximum total attachments per note (default: 1GB)

# Allowed File Types (handled in code, documented here)
# Images: JPEG, PNG, GIF, WebP
# Documents: PDF, Plain Text, Markdown, JSON, CSV
# Add new types in: src/lib/validation.ts

# ================================================================
# CODE EXECUTION CONFIGURATION (Judge0 API)
# ================================================================

# Judge0 API Configuration (OPTIONAL - for code execution features)
# Get your API key from: https://rapidapi.com/judge0-official/api/judge0-ce
# JUDGE0_API_KEY=your_judge0_rapidapi_key_here

# Code execution rate limits
# Adjust based on your Judge0 plan limits (defaults: development=200, production=50)
# CODE_EXEC_RATE_LIMIT_MAX=50         # Max code executions per 15 minutes per user

# ================================================================
# BILLING & LIMITS CONFIGURATION
# ================================================================

# Free Tier Limits
FREE_TIER_STORAGE_GB=1# Storage limit for free users (default: 1GB)
FREE_TIER_NOTE_LIMIT=100# Note count limit for free users (default: 100)

# Usage tracking for billing analytics
# These limits trigger billing events logged to console
# Upgrade prompts and enforcement handled in frontend

# ================================================================
# LOGGING & MONITORING
# ================================================================

# Sentry.io Error Tracking (OPTIONAL)
# Format: https://<key>@<org-id>.ingest.us.sentry.io/<project-id>
# SENTRY_DSN=https://your-sentry-dsn-here
# Error tracking, performance monitoring, and profiling are enabled by default
# Errors are automatically captured and sent to Sentry with full context

# Sentry Auth Token (REQUIRED for production builds with source maps)
# Get from: https://sentry.io/settings/account/api/auth-tokens/
# Scope needed: project:releases, project:write
# SENTRY_AUTH_TOKEN=your-sentry-auth-token-here
# This is only needed during production builds to upload source maps

# Sentry Organization and Project (REQUIRED for production builds with source maps)
# These are used during the build process to upload source maps
# SENTRY_ORG=your-sentry-organization-slug
# SENTRY_PROJECT=your-sentry-project-slug

# Application Logging
# Structured logs are automatically generated for:
# - Authentication events
# - Rate limiting violations
# - Security events (failed auth, suspicious activity)
# - Billing limit violations
# - WebSocket connection events
# - File upload events
# All console logs are also captured by Sentry for centralized monitoring

# ================================================================
# DEVELOPMENT HELPERS
# ================================================================

# Database Development
# Run with Docker: docker run --name typelets-postgres -e POSTGRES_PASSWORD=devpassword -p 5432:5432 -d postgres:15
# Connect: psql postgresql://postgres:devpassword@localhost:5432/typelets_local

# Frontend Development URLs
# Vite dev server: http://localhost:5173
# Next.js dev server: http://localhost:3000
# React dev server: http://localhost:3000

# API Testing
# Health check: GET http://localhost:3000/health
# WebSocket status: GET http://localhost:3000/websocket/status
# API documentation: https://github.com/typelets/typelets-api

# ================================================================
# SECURITY NOTES
# ================================================================

# ðŸ”’ NEVER commit actual secrets to version control
# ðŸ”’ Use different secrets for development and production
# ðŸ”’ Rotate secrets regularly in production
# ðŸ”’ MESSAGE_AUTH_SECRET is critical for WebSocket security
# ðŸ”’ CLERK_SECRET_KEY controls all authentication
# ðŸ”’ DATABASE_URL contains database credentials

# Generate secure secrets:
# MESSAGE_AUTH_SECRET: openssl rand -hex 32
# API Keys: Use your service provider's dashboard
# Database passwords: Use password managers

# Judge0 API Key Setup:
# 1. Go to https://rapidapi.com/judge0-official/api/judge0-ce
# 2. Sign up/login to RapidAPI
# 3. Subscribe to Judge0 CE (free tier available)
# 4. Copy your API key and uncomment JUDGE0_API_KEY above
# 5. Code execution endpoints will be available: /api/code/*

# ================================================================
# PRODUCTION DEPLOYMENT NOTES
# ================================================================

# AWS ECS Deployment:
# - Environment variables are set in ECS task definitions
# - Secrets are managed via AWS Secrets Manager
# - This .env file is NOT used in production
# - SSL/TLS termination handled by Application Load Balancer
# - Database connections use IAM authentication or managed secrets

# Docker Production:
# - Pass environment variables via docker run -e or docker-compose
# - Mount secrets as files or use Docker secrets
# - Never build secrets into Docker images

# Kubernetes Deployment:
# - Use ConfigMaps for non-sensitive configuration
# - Use Secrets for sensitive data (base64 encoded)
# - Consider external secret management (HashiCorp Vault, etc.)

# ================================================================
# TROUBLESHOOTING
# ================================================================

# Common Issues:
# 1. "Database connection failed" â†’ Check DATABASE_URL and database status
# 2. "Authentication failed" â†’ Verify CLERK_SECRET_KEY is correct
# 3. "CORS error" â†’ Add your frontend URL to CORS_ORIGINS
# 4. "Too many requests" â†’ Increase rate limits or check for loops
# 5. "WebSocket connection failed" â†’ Check authentication and rate limits

# Useful Commands:
# Check database connection: npx drizzle-kit studio
# Test API endpoints: curl http://localhost:3000/health
# Monitor logs: tail -f logs/app.log (if file logging enabled)
# Generate new secrets: openssl rand -hex 32

# Support:
# Documentation: https://github.com/typelets/typelets-api
# Issues: https://github.com/typelets/typelets-api/issues