{
  "openapi": "3.1.0",
  "info": {
    "title": "Typelets API",
    "version": "1.11.5",
    "description": "A secure, encrypted notes management API with folder organization and file attachments",
    "contact": { "name": "Typelets API", "url": "https://github.com/typelets/typelets-api" }
  },
  "servers": [{ "url": "https://api.typelets.com", "description": "API Server" }],
  "components": {
    "schemas": {
      "StorageUsage": {
        "type": "object",
        "properties": {
          "totalBytes": { "type": "number", "example": 1590314, "description": "Total bytes used" },
          "totalMB": { "type": "number", "example": 1.52, "description": "Total megabytes used" },
          "totalGB": { "type": "number", "example": 0, "description": "Total gigabytes used" },
          "limitGB": { "type": "number", "example": 1, "description": "Storage limit in GB" },
          "usagePercent": { "type": "number", "example": 0, "description": "Percentage used" },
          "isOverLimit": { "type": "boolean", "example": false, "description": "Is over limit" }
        },
        "required": ["totalBytes", "totalMB", "totalGB", "limitGB", "usagePercent", "isOverLimit"]
      },
      "NoteUsage": {
        "type": "object",
        "properties": {
          "count": { "type": "number", "example": 54, "description": "Current note count" },
          "limit": { "type": "number", "example": 1000, "description": "Maximum notes allowed" },
          "usagePercent": {
            "type": "number",
            "example": 5.4,
            "description": "Percentage of limit used"
          },
          "isOverLimit": { "type": "boolean", "example": false, "description": "Is over limit" }
        },
        "required": ["count", "limit", "usagePercent", "isOverLimit"]
      },
      "Usage": {
        "type": "object",
        "properties": {
          "storage": { "$ref": "#/components/schemas/StorageUsage" },
          "notes": { "$ref": "#/components/schemas/NoteUsage" }
        },
        "required": ["storage", "notes"]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user_2rbRo9aVQTbhEOmwtORqRLtRPXZ",
            "description": "Clerk user ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "User email"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "example": "Rui",
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "example": "Costa",
            "description": "User last name"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-24T19:41:24.451Z",
            "description": "Account creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-24T19:41:24.451Z",
            "description": "Last update date"
          }
        },
        "required": ["id", "email", "firstName", "lastName", "createdAt", "updatedAt"]
      },
      "UserWithUsage": {
        "allOf": [
          { "$ref": "#/components/schemas/User" },
          {
            "type": "object",
            "properties": { "usage": { "$ref": "#/components/schemas/Usage" } },
            "required": ["usage"]
          }
        ]
      },
      "DeleteUserResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User account deleted successfully",
            "description": "Success message"
          }
        },
        "required": ["message"]
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Note ID"
          },
          "userId": { "type": "string", "example": "user_2abc123", "description": "User ID" },
          "folderId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Folder ID"
          },
          "title": {
            "type": "string",
            "example": "[ENCRYPTED]",
            "description": "Encrypted note title"
          },
          "content": {
            "type": "string",
            "example": "[ENCRYPTED]",
            "description": "Encrypted note content"
          },
          "encryptedTitle": {
            "type": "string",
            "nullable": true,
            "example": "base64_encrypted_data",
            "description": "Encrypted title data"
          },
          "encryptedContent": {
            "type": "string",
            "nullable": true,
            "example": "base64_encrypted_data",
            "description": "Encrypted content data"
          },
          "iv": {
            "type": "string",
            "nullable": true,
            "example": "initialization_vector",
            "description": "Initialization vector for AES-GCM"
          },
          "salt": {
            "type": "string",
            "nullable": true,
            "example": "salt_value",
            "description": "Salt for key derivation"
          },
          "starred": {
            "type": "boolean",
            "nullable": true,
            "example": false,
            "description": "Is starred"
          },
          "archived": {
            "type": "boolean",
            "nullable": true,
            "example": false,
            "description": "Is archived"
          },
          "deleted": {
            "type": "boolean",
            "nullable": true,
            "example": false,
            "description": "Is deleted (in trash)"
          },
          "hidden": {
            "type": "boolean",
            "nullable": true,
            "example": false,
            "description": "Is hidden"
          },
          "hiddenAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": null,
            "description": "When note was hidden"
          },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["work", "urgent"],
            "description": "Note tags"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00.000Z",
            "description": "Created date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00.000Z",
            "description": "Updated date"
          },
          "folder": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "123e4567-e89b-12d3-a456-426614174000",
                "description": "Folder ID"
              },
              "userId": { "type": "string", "example": "user_2abc123", "description": "User ID" },
              "name": { "type": "string", "example": "Work", "description": "Folder name" },
              "color": {
                "type": "string",
                "nullable": true,
                "example": "#6b7280",
                "description": "Folder color"
              },
              "parentId": {
                "type": "string",
                "nullable": true,
                "format": "uuid",
                "example": null,
                "description": "Parent folder ID"
              },
              "sortOrder": { "type": "number", "example": 0, "description": "Sort order" },
              "isDefault": {
                "type": "boolean",
                "nullable": true,
                "example": false,
                "description": "Is default folder"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-01-01T00:00:00.000Z",
                "description": "Created date"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-01-01T00:00:00.000Z",
                "description": "Updated date"
              }
            },
            "required": [
              "id",
              "userId",
              "name",
              "color",
              "parentId",
              "sortOrder",
              "isDefault",
              "createdAt",
              "updatedAt"
            ],
            "description": "Associated folder"
          }
        },
        "required": [
          "id",
          "userId",
          "folderId",
          "title",
          "content",
          "encryptedTitle",
          "encryptedContent",
          "iv",
          "salt",
          "starred",
          "archived",
          "deleted",
          "hidden",
          "hiddenAt",
          "tags",
          "createdAt",
          "updatedAt"
        ]
      },
      "NoteWithAttachmentCount": {
        "allOf": [
          { "$ref": "#/components/schemas/Note" },
          {
            "type": "object",
            "properties": {
              "attachmentCount": {
                "type": "number",
                "example": 2,
                "description": "Number of file attachments"
              }
            },
            "required": ["attachmentCount"]
          }
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": { "type": "number", "example": 1, "description": "Current page" },
          "limit": { "type": "number", "example": 20, "description": "Items per page" },
          "total": { "type": "number", "example": 100, "description": "Total items" },
          "pages": { "type": "number", "example": 5, "description": "Total pages" }
        },
        "required": ["page", "limit", "total", "pages"]
      },
      "NotesListResponse": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/NoteWithAttachmentCount" },
            "description": "Array of notes with attachment counts"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "required": ["notes", "pagination"]
      },
      "CreateNoteRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "[ENCRYPTED]",
            "description": "Must be '[ENCRYPTED]'"
          },
          "content": {
            "type": "string",
            "example": "[ENCRYPTED]",
            "description": "Must be '[ENCRYPTED]'"
          },
          "folderId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "example": null,
            "description": "Folder ID (use null or empty string for root level, or a valid folder UUID)"
          },
          "starred": { "type": "boolean", "example": false, "description": "Is starred" },
          "tags": {
            "type": "array",
            "items": { "type": "string", "maxLength": 50 },
            "maxItems": 20,
            "example": ["work"],
            "description": "Up to 20 tags, max 50 chars each"
          },
          "encryptedTitle": {
            "type": "string",
            "example": "base64_encrypted_data",
            "description": "Encrypted title"
          },
          "encryptedContent": {
            "type": "string",
            "example": "base64_encrypted_data",
            "description": "Encrypted content"
          },
          "iv": {
            "type": "string",
            "example": "initialization_vector",
            "description": "Initialization vector"
          },
          "salt": { "type": "string", "example": "salt_value", "description": "Salt value" }
        }
      },
      "UpdateNoteRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "[ENCRYPTED]",
            "description": "Must be '[ENCRYPTED]'"
          },
          "content": {
            "type": "string",
            "example": "[ENCRYPTED]",
            "description": "Must be '[ENCRYPTED]'"
          },
          "folderId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "example": null,
            "description": "Folder ID (use null or empty string for root level, or a valid folder UUID)"
          },
          "starred": { "type": "boolean", "example": false, "description": "Is starred" },
          "archived": { "type": "boolean", "example": false, "description": "Is archived" },
          "deleted": { "type": "boolean", "example": false, "description": "Is deleted" },
          "hidden": { "type": "boolean", "example": false, "description": "Is hidden" },
          "tags": {
            "type": "array",
            "items": { "type": "string", "maxLength": 50 },
            "maxItems": 20,
            "example": ["work"],
            "description": "Up to 20 tags"
          },
          "encryptedTitle": {
            "type": "string",
            "example": "base64_encrypted_data",
            "description": "Encrypted title"
          },
          "encryptedContent": {
            "type": "string",
            "example": "base64_encrypted_data",
            "description": "Encrypted content"
          },
          "iv": {
            "type": "string",
            "example": "initialization_vector",
            "description": "Initialization vector"
          },
          "salt": { "type": "string", "example": "salt_value", "description": "Salt value" }
        }
      },
      "EmptyTrashResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true, "description": "Operation success" },
          "deletedCount": {
            "type": "number",
            "example": 5,
            "description": "Number of notes permanently deleted"
          },
          "message": {
            "type": "string",
            "example": "5 notes permanently deleted from trash",
            "description": "Success message"
          }
        },
        "required": ["success", "deletedCount", "message"]
      },
      "FileAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "description": "File ID"
          },
          "noteId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Note ID"
          },
          "filename": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000_1234567890",
            "description": "Unique filename"
          },
          "originalName": {
            "type": "string",
            "example": "document.pdf",
            "description": "Original filename"
          },
          "mimeType": {
            "type": "string",
            "example": "application/pdf",
            "description": "File MIME type"
          },
          "size": { "type": "number", "example": 1024000, "description": "File size in bytes" },
          "uploadedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00.000Z",
            "description": "Upload date"
          }
        },
        "required": ["id", "noteId", "filename", "originalName", "mimeType", "size", "uploadedAt"]
      },
      "UploadFileRequest": {
        "type": "object",
        "properties": {
          "originalName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "document.pdf",
            "description": "Original filename (1-255 chars)"
          },
          "mimeType": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "application/pdf",
            "description": "File MIME type (max 100 chars)"
          },
          "size": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "example": 1024000,
            "description": "File size in bytes (must be positive)"
          },
          "encryptedData": {
            "type": "string",
            "minLength": 1,
            "example": "base64_encrypted_file_data",
            "description": "Encrypted file data (base64)"
          },
          "iv": {
            "type": "string",
            "minLength": 1,
            "example": "initialization_vector",
            "description": "Initialization vector"
          },
          "salt": {
            "type": "string",
            "minLength": 1,
            "example": "salt_value",
            "description": "Salt for key derivation"
          }
        },
        "required": ["originalName", "mimeType", "size", "encryptedData", "iv", "salt"]
      },
      "FileWithEncryptedData": {
        "type": "object",
        "properties": {
          "encryptedData": {
            "type": "string",
            "example": "base64_encrypted_file_data",
            "description": "Encrypted file data"
          },
          "iv": {
            "type": "string",
            "example": "initialization_vector",
            "description": "Initialization vector for AES-GCM"
          },
          "salt": {
            "type": "string",
            "example": "salt_value",
            "description": "Salt for key derivation"
          },
          "mimeType": {
            "type": "string",
            "example": "application/pdf",
            "description": "File MIME type"
          },
          "originalName": {
            "type": "string",
            "example": "document.pdf",
            "description": "Original filename"
          },
          "noteSalt": {
            "type": "string",
            "nullable": true,
            "example": "note_salt_value",
            "description": "Note's salt (for decryption)"
          }
        },
        "required": ["encryptedData", "iv", "salt", "mimeType", "originalName", "noteSalt"]
      },
      "CodeSubmissionResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "d85cd024-1548-4165-96c7-7bc88673f194",
            "description": "Submission token"
          }
        },
        "required": ["token"]
      },
      "ExecuteCodeRequest": {
        "type": "object",
        "properties": {
          "language_id": {
            "type": "integer",
            "minimum": 1,
            "maximum": 200,
            "example": 71,
            "description": "Language ID (e.g., 71 for Python 3, 63 for JavaScript)"
          },
          "source_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50000,
            "example": "print(\"Hello, World!\")",
            "description": "Source code to execute (max 50,000 chars)"
          },
          "stdin": {
            "type": "string",
            "maxLength": 10000,
            "example": "",
            "description": "Standard input for the program (max 10,000 chars)"
          },
          "cpu_time_limit": {
            "type": "number",
            "minimum": 1,
            "maximum": 30,
            "example": 5,
            "description": "CPU time limit in seconds (1-30, default: 5)"
          },
          "memory_limit": {
            "type": "number",
            "minimum": 16384,
            "maximum": 512000,
            "example": 128000,
            "description": "Memory limit in KB (16384-512000, default: 128000)"
          },
          "wall_time_limit": {
            "type": "number",
            "minimum": 1,
            "maximum": 60,
            "example": 10,
            "description": "Wall time limit in seconds (1-60, default: 10)"
          }
        },
        "required": ["language_id", "source_code"]
      },
      "CodeExecutionStatus": {
        "type": "object",
        "properties": {
          "stdout": {
            "type": "string",
            "nullable": true,
            "example": "Hello, World!\n",
            "description": "Standard output"
          },
          "stderr": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "Standard error"
          },
          "compile_output": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "Compilation output"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "Execution message"
          },
          "status": {
            "type": "object",
            "properties": {
              "id": { "type": "number", "example": 3, "description": "Status ID" },
              "description": {
                "type": "string",
                "example": "Accepted",
                "description": "Status description"
              }
            },
            "required": ["id", "description"],
            "description": "Execution status"
          },
          "time": {
            "type": "string",
            "nullable": true,
            "example": "0.01",
            "description": "Execution time in seconds"
          },
          "memory": {
            "type": "number",
            "nullable": true,
            "example": 3456,
            "description": "Memory used in KB"
          },
          "token": {
            "type": "string",
            "example": "d85cd024-1548-4165-96c7-7bc88673f194",
            "description": "Submission token"
          }
        },
        "required": [
          "stdout",
          "stderr",
          "compile_output",
          "message",
          "status",
          "time",
          "memory",
          "token"
        ]
      },
      "Language": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 71, "description": "Language ID" },
          "name": {
            "type": "string",
            "example": "Python (3.8.1)",
            "description": "Language name and version"
          }
        },
        "required": ["id", "name"]
      },
      "CodeHealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "example": "healthy",
            "description": "Service health status"
          },
          "judge0": {
            "type": "string",
            "enum": ["connected", "partial_connectivity", "disconnected"],
            "example": "connected",
            "description": "Judge0 connection status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00.000Z",
            "description": "Timestamp"
          }
        },
        "required": ["status", "judge0", "timestamp"]
      },
      "Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Folder ID"
          },
          "userId": { "type": "string", "example": "user_2abc123", "description": "User ID" },
          "name": { "type": "string", "example": "Work", "description": "Folder name" },
          "color": {
            "type": "string",
            "nullable": true,
            "example": "#6b7280",
            "description": "Folder color"
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "example": null,
            "description": "Parent folder ID"
          },
          "sortOrder": { "type": "number", "example": 0, "description": "Sort order" },
          "isDefault": {
            "type": "boolean",
            "nullable": true,
            "example": false,
            "description": "Is default folder"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00.000Z",
            "description": "Created date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00.000Z",
            "description": "Updated date"
          }
        },
        "required": [
          "id",
          "userId",
          "name",
          "color",
          "parentId",
          "sortOrder",
          "isDefault",
          "createdAt",
          "updatedAt"
        ]
      },
      "FolderWithCounts": {
        "allOf": [
          { "$ref": "#/components/schemas/Folder" },
          {
            "type": "object",
            "properties": {
              "noteCount": {
                "type": "number",
                "example": 12,
                "description": "Number of active notes in folder"
              },
              "children": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Folder" },
                "description": "Child folders"
              },
              "parent": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000",
                    "description": "Folder ID"
                  },
                  "userId": {
                    "type": "string",
                    "example": "user_2abc123",
                    "description": "User ID"
                  },
                  "name": { "type": "string", "example": "Work", "description": "Folder name" },
                  "color": {
                    "type": "string",
                    "nullable": true,
                    "example": "#6b7280",
                    "description": "Folder color"
                  },
                  "parentId": {
                    "type": "string",
                    "nullable": true,
                    "format": "uuid",
                    "example": null,
                    "description": "Parent folder ID"
                  },
                  "sortOrder": { "type": "number", "example": 0, "description": "Sort order" },
                  "isDefault": {
                    "type": "boolean",
                    "nullable": true,
                    "example": false,
                    "description": "Is default folder"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-01-01T00:00:00.000Z",
                    "description": "Created date"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-01-01T00:00:00.000Z",
                    "description": "Updated date"
                  }
                },
                "required": [
                  "id",
                  "userId",
                  "name",
                  "color",
                  "parentId",
                  "sortOrder",
                  "isDefault",
                  "createdAt",
                  "updatedAt"
                ],
                "description": "Parent folder"
              }
            },
            "required": ["noteCount"]
          }
        ]
      },
      "FoldersListResponse": {
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FolderWithCounts" },
            "description": "Array of folders with counts"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "required": ["folders", "pagination"]
      },
      "CreateFolderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Work Projects",
            "description": "Folder name (1-100 characters)"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "pattern": "^#[0-9A-F]{6}$/i",
            "example": "#3b82f6",
            "description": "Folder color (hex format #RRGGBB)"
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "example": null,
            "description": "Parent folder ID (null for root level)"
          },
          "isDefault": {
            "type": "boolean",
            "example": false,
            "description": "Is this the default folder"
          }
        },
        "required": ["name"]
      },
      "UpdateFolderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Updated Folder Name",
            "description": "Folder name (1-100 characters)"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "pattern": "^#[0-9A-F]{6}$/i",
            "example": "#ef4444",
            "description": "Folder color (hex format #RRGGBB)"
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "example": null,
            "description": "Parent folder ID (null for root level)"
          }
        }
      },
      "DeleteFolderResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Folder deleted successfully",
            "description": "Success message"
          }
        },
        "required": ["message"]
      },
      "ReorderFolderResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Folder reordered successfully",
            "description": "Success message"
          },
          "folderId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Folder ID"
          },
          "newIndex": { "type": "number", "example": 2, "description": "New position" }
        },
        "required": ["message", "folderId", "newIndex"]
      },
      "ReorderFolderRequest": {
        "type": "object",
        "properties": {
          "newIndex": {
            "type": "integer",
            "minimum": 0,
            "example": 2,
            "description": "New position index for the folder"
          }
        },
        "required": ["newIndex"]
      }
    },
    "parameters": {},
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Clerk authentication token"
      }
    }
  },
  "paths": {
    "/api/users/me": {
      "get": {
        "summary": "Get current user",
        "description": "Returns the authenticated user's information. When include_usage=true, includes storage and note usage statistics",
        "tags": ["Users"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "true",
              "description": "Include usage statistics"
            },
            "required": false,
            "description": "Include usage statistics",
            "name": "include_usage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully. Returns user with usage when include_usage=true, otherwise just user info",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserWithUsage" } }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" }
        }
      },
      "delete": {
        "summary": "Delete current user",
        "description": "Permanently deletes the authenticated user's account and all associated data (notes, folders, attachments)",
        "tags": ["Users"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "User account deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteUserResponse" }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" }
        }
      }
    },
    "/api/notes/counts": {
      "get": {
        "summary": "Get note counts",
        "description": "Returns aggregated counts of notes by category. Without folder_id: returns total counts plus folders object. With folder_id: returns only a folders object (Record<folderId, counts>) with counts for each direct child folder including their descendants",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Optional. Get counts for each direct child folder of this folder ID (includes descendant notes). If omitted, returns total counts plus root-level folder counts"
            },
            "required": false,
            "description": "Optional. Get counts for each direct child folder of this folder ID (includes descendant notes). If omitted, returns total counts plus root-level folder counts",
            "name": "folder_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Note counts retrieved successfully. Without folder_id: returns {all, starred, archived, trash, folders}. With folder_id: returns Record<folderId, {all, starred, archived, trash}>",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "example": {
                    "all": 42,
                    "starred": 5,
                    "archived": 12,
                    "trash": 3,
                    "folders": {
                      "123e4567-e89b-12d3-a456-426614174000": {
                        "all": 10,
                        "starred": 2,
                        "archived": 1,
                        "trash": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" }
        }
      }
    },
    "/api/notes": {
      "get": {
        "summary": "List notes",
        "description": "Get a paginated list of notes with optional filters for folder, starred, archived, deleted, hidden status, and search",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Filter by folder ID"
            },
            "required": false,
            "description": "Filter by folder ID",
            "name": "folderId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "true",
              "description": "Filter by starred status"
            },
            "required": false,
            "description": "Filter by starred status",
            "name": "starred",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "false",
              "description": "Filter by archived status"
            },
            "required": false,
            "description": "Filter by archived status",
            "name": "archived",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "false",
              "description": "Filter by deleted status"
            },
            "required": false,
            "description": "Filter by deleted status",
            "name": "deleted",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "false",
              "description": "Filter by hidden status"
            },
            "required": false,
            "description": "Filter by hidden status",
            "name": "hidden",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 100,
              "example": "meeting notes",
              "description": "Search in title and content (max 100 chars, alphanumeric only)"
            },
            "required": false,
            "description": "Search in title and content (max 100 chars, alphanumeric only)",
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "example": "1",
              "description": "Page number (default: 1)"
            },
            "required": false,
            "description": "Page number (default: 1)",
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 50,
              "example": "20",
              "description": "Items per page (1-50, default: 20)"
            },
            "required": false,
            "description": "Items per page (1-50, default: 20)",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Notes retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NotesListResponse" } }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" }
        }
      },
      "post": {
        "summary": "Create note",
        "description": "Create a new encrypted note. Title and content must be '[ENCRYPTED]' with actual encrypted data in encryptedTitle/encryptedContent fields",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateNoteRequest" } }
          }
        },
        "responses": {
          "201": {
            "description": "Note created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "400": { "description": "Invalid request body" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "402": { "description": "Payment required - Note limit exceeded" }
        }
      }
    },
    "/api/notes/{id}": {
      "get": {
        "summary": "Get note by ID",
        "description": "Retrieve a single note by its ID with associated folder information",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      },
      "put": {
        "summary": "Update note",
        "description": "Update an existing note's properties. Title and content must be '[ENCRYPTED]' if provided",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateNoteRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Note updated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "400": { "description": "Invalid request body" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      },
      "delete": {
        "summary": "Delete note",
        "description": "Soft delete a note by marking it as deleted (moves to trash). Can be restored later",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note deleted successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      }
    },
    "/api/notes/{id}/star": {
      "post": {
        "summary": "Toggle star",
        "description": "Toggle the starred status of a note",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note starred status toggled successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      }
    },
    "/api/notes/{id}/restore": {
      "post": {
        "summary": "Restore note",
        "description": "Restore a deleted note from trash and unarchive it",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note restored successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      }
    },
    "/api/notes/{id}/hide": {
      "post": {
        "summary": "Hide note",
        "description": "Hide a note from normal view",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note hidden successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "400": { "description": "Note is already hidden" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      }
    },
    "/api/notes/{id}/unhide": {
      "post": {
        "summary": "Unhide note",
        "description": "Unhide a previously hidden note",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note unhidden successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
          },
          "400": { "description": "Note is not hidden" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Note not found" }
        }
      }
    },
    "/api/notes/empty-trash": {
      "delete": {
        "summary": "Empty trash",
        "description": "Permanently delete all notes marked as deleted (in trash). This action cannot be undone",
        "tags": ["Notes"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Trash emptied successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmptyTrashResponse" }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "500": { "description": "Failed to empty trash" }
        }
      }
    },
    "/api/notes/{noteId}/files": {
      "post": {
        "summary": "Upload file",
        "description": "Upload an encrypted file attachment to a note. Maximum file size: 50MB. Maximum total attachments per note: 1024MB",
        "tags": ["Files"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "noteId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UploadFileRequest" } }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileAttachment" } }
            }
          },
          "400": { "description": "Invalid request body" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "403": { "description": "Access denied - Note not found or not owned by user" },
          "413": { "description": "File too large or total attachment size limit exceeded" }
        }
      },
      "get": {
        "summary": "List files",
        "description": "Get all file attachments for a specific note",
        "tags": ["Files"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "description": "Note ID"
            },
            "required": true,
            "description": "Note ID",
            "name": "noteId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Files retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FileAttachment" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "403": { "description": "Access denied - Note not found or not owned by user" }
        }
      }
    },
    "/api/files/{fileId}": {
      "get": {
        "summary": "Get file",
        "description": "Retrieve an encrypted file attachment by ID. Returns the encrypted data with decryption metadata",
        "tags": ["Files"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174002",
              "description": "File ID"
            },
            "required": true,
            "description": "File ID",
            "name": "fileId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "File retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileWithEncryptedData" }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "File not found or access denied" }
        }
      },
      "delete": {
        "summary": "Delete file",
        "description": "Permanently delete a file attachment",
        "tags": ["Files"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174002",
              "description": "File ID"
            },
            "required": true,
            "description": "File ID",
            "name": "fileId",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "File deleted successfully" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "File not found or access denied" }
        }
      }
    },
    "/api/code/execute": {
      "post": {
        "summary": "Execute code",
        "description": "Submit code for execution via Judge0. Returns a token that can be used to check execution status. Supports 50+ programming languages.",
        "tags": ["Code Execution"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ExecuteCodeRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Code submitted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CodeSubmissionResponse" }
              }
            }
          },
          "400": { "description": "Invalid request body" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "429": { "description": "Rate limit exceeded - Too many requests" },
          "503": { "description": "Code execution service temporarily unavailable" },
          "504": { "description": "Request timeout - Code execution took too long" }
        }
      }
    },
    "/api/code/status/{token}": {
      "get": {
        "summary": "Get execution status",
        "description": "Check the status of a code execution submission. Returns stdout, stderr, execution time, memory usage, and status information.",
        "tags": ["Code Execution"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "d85cd024-1548-4165-96c7-7bc88673f194",
              "description": "Submission token"
            },
            "required": true,
            "description": "Submission token",
            "name": "token",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Execution status retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CodeExecutionStatus" }
              }
            }
          },
          "400": { "description": "Invalid token format" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Submission not found" },
          "503": { "description": "Code execution service temporarily unavailable" }
        }
      }
    },
    "/api/code/languages": {
      "get": {
        "summary": "Get supported languages",
        "description": "Returns a list of all programming languages supported by the code execution service, including language IDs and versions.",
        "tags": ["Code Execution"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Languages retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Language" } }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "503": { "description": "Code execution service temporarily unavailable" }
        }
      }
    },
    "/api/code/health": {
      "get": {
        "summary": "Health check",
        "description": "Check the health status of the code execution service and Judge0 connection.",
        "tags": ["Code Execution"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CodeHealthResponse" }
              }
            }
          },
          "207": {
            "description": "Service is degraded but partially functional",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CodeHealthResponse" }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "503": {
            "description": "Service is unhealthy",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CodeHealthResponse" }
              }
            }
          }
        }
      }
    },
    "/api/folders": {
      "get": {
        "summary": "List folders",
        "description": "Returns a paginated list of folders. Supports filtering by parent folder. Results include note counts and child folders.",
        "tags": ["Folders"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Filter by parent folder ID (omit for root-level folders)"
            },
            "required": false,
            "description": "Filter by parent folder ID (omit for root-level folders)",
            "name": "parentId",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "example": "1",
              "description": "Page number (default: 1)"
            },
            "required": false,
            "description": "Page number (default: 1)",
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 50,
              "example": "20",
              "description": "Items per page (1-50, default: 20)"
            },
            "required": false,
            "description": "Items per page (1-50, default: 20)",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Folders retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FoldersListResponse" }
              }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" }
        }
      },
      "post": {
        "summary": "Create folder",
        "description": "Creates a new folder. Optionally specify a parent folder for nested organization.",
        "tags": ["Folders"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateFolderRequest" } }
          }
        },
        "responses": {
          "201": {
            "description": "Folder created successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Folder" } }
            }
          },
          "400": { "description": "Bad request - Invalid input or parent folder not found" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" }
        }
      }
    },
    "/api/folders/{id}": {
      "get": {
        "summary": "Get folder by ID",
        "description": "Returns a single folder with note count, child folders, and parent folder information.",
        "tags": ["Folders"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Folder ID"
            },
            "required": true,
            "description": "Folder ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FolderWithCounts" } }
            }
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Folder not found" }
        }
      },
      "put": {
        "summary": "Update folder",
        "description": "Updates folder properties (name, color, parent). Prevents circular references.",
        "tags": ["Folders"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Folder ID"
            },
            "required": true,
            "description": "Folder ID",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateFolderRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Folder updated successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Folder" } }
            }
          },
          "400": {
            "description": "Bad request - Invalid input, parent not found, or circular reference"
          },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Folder not found" }
        }
      },
      "delete": {
        "summary": "Delete folder",
        "description": "Deletes an empty folder. Folder must not contain notes or subfolders.",
        "tags": ["Folders"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Folder ID"
            },
            "required": true,
            "description": "Folder ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteFolderResponse" }
              }
            }
          },
          "400": { "description": "Bad request - Folder contains notes or subfolders" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Folder not found" },
          "500": { "description": "Internal server error - Failed to delete folder" }
        }
      }
    },
    "/api/folders/{id}/reorder": {
      "put": {
        "summary": "Reorder folder",
        "description": "Reorders a folder to a new position within its parent. Automatically adjusts the sort order of all sibling folders.",
        "tags": ["Folders"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "description": "Folder ID"
            },
            "required": true,
            "description": "Folder ID",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReorderFolderRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Folder reordered successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReorderFolderResponse" }
              }
            }
          },
          "400": { "description": "Bad request - Invalid new index" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "404": { "description": "Folder not found" },
          "500": { "description": "Internal server error - Failed to reorder folders" }
        }
      }
    }
  }
}
